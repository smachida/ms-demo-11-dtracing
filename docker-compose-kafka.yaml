version: '2.1'

services:
  product:
    image: ms-demo-11-dtracing-product-service:latest
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
      - SPRING_CLOUD_BOOTSTRAP_ENABLED=true
    depends_on:
      - kafka
      - mongodb_product
  product-p1:
    image: ms-demo-11-dtracing-product-service:latest
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
      - SPRING_CLOUD_BOOTSTRAP_ENABLED=true
    depends_on:
      - kafka
      - mongodb_product

  recommendation:
    image: ms-demo-11-dtracing-recommendation-service:latest
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
      - SPRING_CLOUD_BOOTSTRAP_ENABLED=true
    depends_on:
      - kafka
      - mongodb_recommendation
  recommendation-p1:
    image: ms-demo-11-dtracing-recommendation-service:latest
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
      - SPRING_CLOUD_BOOTSTRAP_ENABLED=true
    depends_on:
      - kafka
      - mongodb_recommendation

  review:
    image: ms-demo-11-dtracing-review-service:latest
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
      - SPRING_CLOUD_BOOTSTRAP_ENABLED=true
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started
  review-p1:
    image: ms-demo-11-dtracing-review-service:latest
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
      - SPRING_CLOUD_BOOTSTRAP_ENABLED=true
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started

  product-composite:
    image: ms-demo-11-dtracing-product-composite-service:latest
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
      - SPRING_CLOUD_BOOTSTRAP_ENABLED=true
    ports:
      - "8080:8080"
    depends_on:
      - kafka

  eureka:
    image: ms-demo-11-dtracing-eureka-server:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
      - SPRING_CLOUD_BOOTSTRAP_ENABLED=true
    ports:
      - "8761:8761"
    networks:
      - my-network

  gateway:
    image: ms-demo-11-dtracing-gateway:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
      - SPRING_CLOUD_BOOTSTRAP_ENABLED=true
    ports:
      - "8443:8443"
    networks:
      - my-network

  auth-server:
    image: ms-demo-11-dtracing-authorization-server:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker,kafka
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    ports:
      - "9999:9999"
    networks:
      - my-network

  config-server:
    image: ms-demo-11-dtracing-config-server:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker,native
      - ENCRYPT_KEY=${CONFIG_SERVER_ENCRYPT_KEY}
      - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}
      - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_PWD}
    volumes:
      - $PWD/config-repo:/config-repo
    ports:
      - "8888:8888"
    networks:
      - my-network

  workstation:
    image: openjdk:latest
    networks:
      - my-network
    tty: true

  # $ mongo
  mongodb_product:
    image: mongo:3.6.9
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
      MONGO_INITDB_DATABASE: product-db
      TZ: Asia/Tokyo
    networks:
      - my-network
    ports:
      - "27017:27017"
    command: mongod --smallfiles
    volumes:
      - ./initdb-mongo-product.d:/docker-entrypoint-initdb.d
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 10s
      timeout: 5s
      retries: 10

  # $ mongo
  mongodb_recommendation:
    image: mongo:3.6.9
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
      MONGO_INITDB_DATABASE: recommendation-db
      TZ: Asia/Tokyo
    networks:
      - my-network
    ports:
      - "27018:27017"
    command: mongod --smallfiles
    volumes:
      - ./initdb-mongo-recommendation.d:/docker-entrypoint-initdb.d
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 10s
      timeout: 5s
      retries: 10

  # $ mysql -uroot -h127.0.0.1 -p
  mysql:
    image: mysql:5.7.23
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_bin
    networks:
      - my-network
    ports:
      - "13306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=review-db
      - MYSQL_USER=vmware
      - MYSQL_PASSWORD=password
    volumes:
      - ./initdb-mysql-review.d:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-uvmware", "-ppassword", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka:
    image: wurstmeister/kafka:2.12-2.1.0
    networks:
      - my-network
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    depends_on:
      - zookeeper

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    networks:
      - my-network
    ports:
      - "2181:2181"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=zookeeper

  zipkin:
    image: openzipkin/zipkin:2.12.9
    networks:
      - my-network
    environment:
      - STORAGE_TYPE=mem
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    ports:
      - 9411:9411
    depends_on:
      - kafka

networks:
  my-network:
    name: my-network